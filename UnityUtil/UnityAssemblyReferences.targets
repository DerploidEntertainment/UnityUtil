<Project>

  <!--
    Example .csproj using this file:

      <PropertyGroup Label="Unity Assembly References">
        <UnityVersion>YYYY.1.1f1</UnityVersion>   // E.g., 2019.1.6f1
        <UnityHubInstallLocation>C:/Program Files/Unity/Hub/Editor</UnityHubInstallLocation>  // Optional (only needed if using a non-default Unity install location)
        <ReferenceUnityEngine>true</ReferenceUnityEngine>                       // or false
        <ReferenceUnityEditor>true</ReferenceUnityEditor>                       // or false
        <ReferenceUnityEngineUi>true</ReferenceUnityEngineUi>                   // or false
        <ReferenceUnityEngineTestRunner>true</ReferenceUnityEngineTestRunner>   // or false
      </PropertyGroup>
      <Import Project="Danware/UnityUtil/UnityUtil/UnityAssemblyReferences.props"/>
  -->

  <!-- General project properties -->
  <PropertyGroup>
    <DebugType>portable</DebugType>   <!-- So that Unity doesn't have to generate .mdb files -->
  </PropertyGroup>

  <!-- Conditional compile symbols -->
  <PropertyGroup Condition="'$(Configuration)'=='Debug'">
    <DefineConstants>DEBUG;TRACE;UNITY_ASSERTIONS</DefineConstants>
  </PropertyGroup>

  <!-- Get default Unity install locations, if requested -->
  <PropertyGroup Condition="'$(UnityVersion)'!=''">
    <UnityHubInstallLocation Condition="'$(UnityHubInstallLocation)'=='' And $([MSBuild]::IsOsPlatform(Windows))">C:/Program Files/Unity/Hub/Editor</UnityHubInstallLocation>
    <UnityHubInstallLocation Condition="'$(UnityHubInstallLocation)'=='' And !$([MSBuild]::IsOsPlatform(Windows))">/Application/Unity/Hub/Editor</UnityHubInstallLocation>
    <UnityInstallLocation Condition="'$(UnityInstallLocation)'=='' And $([MSBuild]::IsOsPlatform(Windows))">C:/Program Files/Unity/Editor</UnityInstallLocation>
    <UnityInstallLocation Condition="'$(UnityInstallLocation)'=='' And !$([MSBuild]::IsOsPlatform(Windows))">/Application/Unity/Editor</UnityInstallLocation>
  </PropertyGroup>

  <!-- Check whether we're using the Unity Hub or standalone editor install locations -->
  <PropertyGroup Condition="'$(UnityVersion)'!='' And Exists($(UnityHubInstallLocation))">
    <UnityHubInstalled>true</UnityHubInstalled>
    <UnityLocation>$(UnityHubInstallLocation)</UnityLocation>
  </PropertyGroup>
  <PropertyGroup Condition="'$(UnityVersion)'!='' And !Exists($(UnityHubInstallLocation))">
    <UnityHubInstalled>false</UnityHubInstalled>
    <UnityLocation>$(UnityInstallLocation)</UnityLocation>
  </PropertyGroup>

  <!-- Get full paths of specific Unity assemblies -->
  <PropertyGroup Condition="'$(UnityVersion)'!=''">
    <UnityEngineAssembly Condition="'$(ReferenceUnityEngine)'=='true'">$(UnityLocation)/$(UnityVersion)/Editor/Data/Managed/UnityEngine.dll</UnityEngineAssembly>
    <UnityEditorAssembly Condition="'$(ReferenceUnityEditor)'=='true'">$(UnityLocation)/$(UnityVersion)/Editor/Data/Managed/UnityEditor.dll</UnityEditorAssembly>
    <UnityEngineUiAssembly Condition="'$(ReferenceUnityEngineUi)'=='true'">$(UnityLocation)/$(UnityVersion)/Editor/Data/UnityExtensions/Unity/GUISystem/UnityEngine.UI.dll</UnityEngineUiAssembly>
    <UnityEngineTestRunnerAssembly Condition="'$(ReferenceUnityEngineTestRunner)'=='true'">$(UnityLocation)/$(UnityVersion)/Editor/Data/UnityExtensions/Unity/TestRunner/UnityEngine.TestRunner.dll</UnityEngineTestRunnerAssembly>
  </PropertyGroup>

  <!-- Log if any of the requested assemblies do not exist -->
  <Target Name="CheckUnityAssembliesExist" BeforeTargets="BeforeBuild" Condition="'$(UnityVersion)'!=''">
    <PropertyGroup>
      <MissingUnityAssemblyMessage>Make sure the provided Unity version ('$(UnityVersion)') is installed at the provided location.</MissingUnityAssemblyMessage>
    </PropertyGroup>
    <Message Importance="high"
      Condition="'$(UnityHubInstalled)'=='false'"
      Text="Unity versions not found at Unity Hub location '$(UnityHubInstallLocation)'. Searching in '$(UnityInstallLocation)'..." />
    <Warning Code="MSB3245"
      Condition="'$(ReferenceUnityEngine)'=='true' And !Exists($(UnityEngineAssembly))"
      Text="UnityEngine assembly not found at '$(UnityEngineAssembly)'. $(MissingUnityAssemblyMessage)" />
    <Warning Code="MSB3245"
      Condition="'$(ReferenceUnityEditor)'=='true' And !Exists($(UnityEditorAssembly))"
      Text="UnityEditor assembly not found at '$(UnityEditorAssembly)'. $(MissingUnityAssemblyMessage)" />
    <Warning Code="MSB3245"
      Condition="'$(ReferenceUnityEngineUi)'=='true' And !Exists($(UnityEngineUiAssembly))"
      Text="UnityEngine.UI assembly not found at '$(UnityEngineUiAssembly)'. $(MissingUnityAssemblyMessage)" />
    <Warning Code="MSB3245"
      Condition="'$(ReferenceUnityEngineTestRunner)'=='true' And !Exists($(UnityEngineTestRunnerAssembly))"
      Text="UnityEngine.TestRunner assembly not found at '$(UnityEngineTestRunnerAssembly)'. $(MissingUnityAssemblyMessage)" />
  </Target>

  <!-- Add the requested Unity assembly references, if they do exist -->
  <ItemGroup Condition="'$(UnityVersion)'!=''">
    <Reference Include="UnityEngine.dll" Condition="'$(ReferenceUnityEngine)'=='true'">
      <HintPath>$(UnityEngineAssembly)</HintPath>
      <Private>false</Private>
    </Reference>
    <Reference Include="UnityEditor.dll" Condition="'$(ReferenceUnityEditor)'=='true'">
      <HintPath>$(UnityEditorAssembly)</HintPath>
      <Private>false</Private>
    </Reference>
    <Reference Include="UnityEngine.UI.dll" Condition="'$(ReferenceUnityEngineUi)'=='true'">
      <HintPath>$(UnityEngineUiAssembly)</HintPath>
      <Private>false</Private>
    </Reference>
    <Reference Include="UnityEngine.TestRunner.dll" Condition="'$(ReferenceUnityEngineTestRunner)'=='true'">
      <HintPath>$(UnityEngineTestRunnerAssembly)</HintPath>
      <Private>false</Private>
    </Reference>
  </ItemGroup>

</Project>
